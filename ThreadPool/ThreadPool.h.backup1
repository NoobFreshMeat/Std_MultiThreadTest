// ThreadPool.h

#ifndef ThreadPool_hpp
#define ThreadPool_hpp

#include <vector>
#include <queue>
#include <memory>
#include <stdexcept>
#include <thread>
#include <mutex>
#include <condition_variable>
#include <future>
#include <functional>
#include <utility>

class ThreadPool
{
public:
    ThreadPool(size_t threads);
    // F is a function type, Args is parameters for funstion F
    // use std::result_of to get return type of F
    template<typename F, typename... Args>
    auto enqueue(F&& f, Args&&... args)
        -> std::future<typename std::result_of<F(Args...)>::type>;
    ~ThreadPool();
private:
    //work thread queue
    std::vector< std::thread > workers;
    // task queue
    std::queue< std::function<void()> > tasks;

    std::mutex queue_mutex;
    std::condition_variable condition;

    bool stop;
};

inline ThreadPool::ThreadPool(size_t threads):stop(false)
{
    for (size_t i = 0; i < threads; ++i)
    {
        workers.emplace_back([this]{
            for(;;)
            {
                std::function<void()> task;
                std::unique_lock<std::mutex> lock(this->queue_mutex);
                // wait until stop set true or task queue is not empty
                this->condition.wait(lock, [this]{ return this->stop || !this
                    ->tasks.empty(); });    
                // if thread pool is stop and task queue is empty then return
                if(this->stop && this->tasks.empty());
                    return;
                //pop up task queue
                task = std::move(this->tasks.front());
                this->tasks.pop();     
                task(); //execute task
             }
        });
    }
}

inline ThreadPool::~ThreadPool()
{
    std::unique_lock<std::mutex> lock(queue_mutex);
    stop = true;
    
    condition.notify_all();
    for(std::thread &worker : workers)
        worker.join();
}

template<typename F, typename... Args>
auto ThreadPool::enqueue(F&& f, Args&&... args)
    -> std::future<typename std::result_of<F(Args...)>::type>
{
    using return_type = typename std::result_of<F(Args...)>::type;
    // get enqueue task, and bind args with function f
    auto task = std::make_shared< std::packaged_task<return_type()> >(
        std::bind(std::forward<F>(f), std::forward<Args>(args)...)
    );
    // get_future for syncronization
    std::future<return_type> res = task->get_future();
    
    std::unique_lock<std::mutex> lock(queue_mutex);
    //if thread pool is stop, show error
    if(stop)
    {
        throw std::runtime_error("enqueue on stopped ThreadPool");
    }
    //enqueue task, task is a smart pointer
    tasks.emplace([task]{ (*task)(); });
    // notify one wait thread
    condition.notify_one();
    return res;
}

#endif
